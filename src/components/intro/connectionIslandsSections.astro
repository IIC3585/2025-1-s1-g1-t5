---
import { connectionTypes } from "@/constants/intro";
import Console from "../console.astro";
import ConsoleLine from "../consoleLine.astro";

// Funciones para resaltado de código
function getColorForLine(line: string) {
  if (line.includes("×")) return "text-red-400";
  if (line.trim().startsWith("//")) return "text-green-400";
  if (line.includes("import") || line.includes("export")) return "text-purple-400";
  return "text-blue-100";
}

function formatLineContent(line: string) {
  return line
    .replace(/×/g, '<span class="text-red-400 font-bold">×</span>')
    .replace(/✓/g, '<span class="text-green-400 font-bold">✓</span>')
    .replace(/'(.*?)'/g, '<span class="text-green-300">\'$1\'</span>');
}
---

<section class="space-y-8">
  <!-- Introducción -->
  <div class="prose prose-invert max-w-none">
    <h2 class="text-5xl font-bold text-white mb-4">Comunicación entre Islas en Astro</h2>
    <p class="text-xl text-blue-200 mb-6">
      Las islas en Astro son componentes interactivos que se hidratan de forma independiente. 
      Para compartir estado entre ellas, debes usar estos patrones específicos:
    </p>
  </div>

  <!-- Ejemplos de implementación -->
  <div class="grid md:grid-cols-2 gap-6">
    {connectionTypes.map((connection) => (
      <div class="bg-slate-800/50 rounded-xl p-6 border border-slate-700 hover:border-blue-400 transition-colors">
        <div class="flex items-center gap-3 mb-4">
          <div class={`w-3 h-3 rounded-full ${
            connection.type === 'Event Bus' ? 'bg-purple-500' : 
            connection.type === 'Global State' ? 'bg-blue-500' :
            'bg-green-500'
          }`}></div>
          <h3 class="text-2xl font-bold text-white">{connection.type}</h3>
        </div>

        <p class="text-blue-100 mb-5">{connection.description}</p>

        <!-- Bloque de código -->
        <Console 
          title={`ejemplo-${connection.type.toLowerCase().replace(' ', '-')}.astro`} 
          status="Active"
        >
          <ConsoleLine lineNumber={1} color="text-green-400">
            // {connection.useCase}
          </ConsoleLine>
          {connection.example.split('\n').map((line, i) => (
            <ConsoleLine lineNumber={i+2} color={getColorForLine(line)}>
              {formatLineContent(line)}
            </ConsoleLine>
          ))}
        </Console>

        <div class="mt-4 bg-slate-900/30 rounded-lg px-4 py-3">
          <span class="text-blue-300 font-semibold">Cuándo usar:</span>
          <span class="text-blue-100 ml-2">{connection.useCase}</span>
        </div>
      </div>
    ))}
    <div class="bg-slate-800/50 rounded-xl p-6 border border-slate-700 hover:border-blue-400 transition-colors">
    <h3 class="text-2xl font-bold text-white flex items-center gap-2 mb-4">
      <svg class="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
      </svg>
      Patrones que NO funcionan
    </h3>

    <ul class="list-disc list-inside text-red-200 space-y-2 pl-4">
      <li><span class="font-mono bg-red-900/50 px-1.5 py-0.5 rounded">ref.current</span> entre componentes de diferentes islas</li>
      <li>Context API de React entre frameworks distintos</li>
      <li>Stores específicas (Vuex, Svelte stores) entre islas</li>
      <li>Comunicación directa entre componentes de diferentes frameworks</li>
    </ul>
  </div>
  </div>
</section>