---
import Console from "@/components/console.astro";
import ConsoleLine from "@/components/consoleLine.astro";
import { Code } from "astro:components";
import { 
  Book, 
  Database, 
  Zap, 
  FileText, 
  Code as CodeIcon, 
  Globe, 
  Clock, 
  Layers, 
  CheckCircle, 
  AlertCircle 
} from '@lucide/astro';

const codeExamples = {
  schema: `// src/content/config.ts
import { defineCollection, z } from 'astro:content';

const blogCollection = defineCollection({
  type: 'content', // v2.5.0 y posteriores
  schema: z.object({
    title: z.string(),
    pubDate: z.date(),
    description: z.string(),
    author: z.string(),
    tags: z.array(z.string()).optional(),
    image: z.object({
      url: z.string(),
      alt: z.string()
    }).optional(),
  }),
});

export const collections = {
  'blog': blogCollection,
};`,
    
  usage: `---
// En tu página .astro
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

const blogPosts = await getCollection('blog');
const sortedPosts = blogPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<Layout title="Blog">
  <div class="blog-list">
    {sortedPosts.map((post) => (
      <article class="post-card">
        <h2>
          <a href={\`/blog/\${post.slug}\`}>
            {post.data.title}
          </a>
        </h2>
        <p>{post.data.description}</p>
        <time>{post.data.pubDate.toDateString()}</time>
      </article>
    ))}
  </div>
</Layout>`,

  loader: `// src/content/config.ts - Astro 5.0+
import { defineCollection, z } from 'astro:content';
import { glob } from 'astro/loaders';

const blogCollection = defineCollection({
  loader: glob({ pattern: '**/*.md', base: './src/data/blog' }),
  schema: z.object({
    title: z.string(),
    pubDate: z.date(),
    tags: z.array(z.string()),
  }),
});

// Con API externa
const newsCollection = defineCollection({
  loader: async () => {
    const response = await fetch('https://api.example.com/news');
    const articles = await response.json();
    
    return articles.map(article => ({
      id: article.id,
      title: article.title,
      content: article.content,
      pubDate: new Date(article.date),
    }));
  },
  schema: z.object({
    title: z.string(),
    content: z.string(),
    pubDate: z.date(),
  }),
});`
};

const whenToUse = [
  {
    scenario: "Blog o documentación",
    description: "Perfecto para contenido markdown con metadatos estructurados",
    icon: FileText,
    recommended: true
  },
  {
    scenario: "Portfolio de proyectos",
    description: "Organiza proyectos con imágenes, tecnologías y descripciones",
    icon: Layers,
    recommended: true
  },
  {
    scenario: "Contenido desde CMS",
    description: "Con loaders puedes conectar Contentful, Strapi, etc.",
    icon: Database,
    recommended: true
  },
  {
    scenario: "Páginas simples estáticas",
    description: "Para pocas páginas sin estructura, usa páginas normales",
    icon: Globe,
    recommended: false
  }
];

const alternatives = [
  {
    name: "Páginas .astro normales",
    when: "Contenido simple sin estructura repetitiva",
    pros: ["Más directo", "Sin configuración extra"],
    cons: ["Sin validación de tipos", "Difícil de escalar"]
  },
  {
    name: "Live Collections o SSR",
    when: "Datos dinámicos o contenido que cambia frecuentemente",
    pros: ["Flexibilidad total", "Datos en tiempo real"],
    cons: ["Más complejidad", "Feature experimental"]
  }
];

const tabs = [
  { id: 'what', label: '¿Qué son?', icon: Book },
  { id: 'when', label: '¿Cuándo usar?', icon: CheckCircle },
  { id: 'how', label: '¿Cómo implementar?', icon: CodeIcon },
  { id: 'alternatives', label: 'Alternativas', icon: AlertCircle }
];
---

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8">
  
  <!-- Header Section -->
  <div class="text-center mb-8 sm:mb-12">
    <div class="inline-flex items-center gap-3 bg-indigo-300 rounded-full px-4 sm:px-6 py-3 mb-6 backdrop-blur-sm border border-indigo-400">
      <Database class="w-5 h-5 sm:w-6 sm:h-6 text-indigo-600" />
      <span class="text-indigo-800 font-semibold text-base sm:text-lg">Content Collections</span>
      <span class="bg-indigo-600 text-indigo-100 px-2 py-1 rounded text-xs sm:text-sm">
        Tu Base de Datos de Contenido
      </span>
    </div>
    <h2 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-800 mb-4">
      Gestiona tu Contenido como un Pro
    </h2>
    <p class="text-gray-600 text-base sm:text-lg max-w-4xl mx-auto leading-relaxed">
      las Content Collections son la forma más poderosa de organizar y validar contenido en Astro.
      Con TypeScript automático y validación de esquemas, transforman tu contenido en una base de datos tipada.
    </p>
  </div>

  <!-- Navigation Tabs -->
  <div class="flex flex-wrap justify-center gap-2 mb-8 sm:mb-12">
    {tabs.map((tab) => (
      <button
        data-tab={tab.id}
        class="tab-button flex items-center gap-2 px-3 sm:px-4 py-2 rounded-lg font-medium transition-all duration-300 text-sm sm:text-base bg-gray-200 text-gray-600 hover:bg-gray-100"
      >
        <tab.icon class="w-4 h-4" />
        {tab.label}
      </button>
    ))}
  </div>

  <!-- Content Sections -->
  <div class="bg-gray-100 backdrop-blur-sm rounded-2xl border border-gray-300 overflow-hidden">
    
    <!-- What Section -->
    <div id="what-section" class="tab-content p-6 sm:p-8">
      <div class="space-y-8">
        <div class="grid lg:grid-cols-2 gap-6 lg:gap-8">
          <div>
            <h3 class="text-xl sm:text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2 flex-wrap">
              <Zap class="w-5 h-5 sm:w-6 sm:h-6 text-yellow-400" />
              <span>¿Qué son las Content Collections?</span>
            </h3>
            <div class="text-gray-600 space-y-4 text-sm sm:text-base">
              <p>
                Content collections son la mejor forma de gestionar conjuntos de contenido en cualquier proyecto Astro. Las Collections ayudan a organizar y consultar tus documentos, habilitan Intellisense y la comprobación de tipos en tu editor, y proporcionan seguridad de tipos TypeScript automática para todo tu contenido.
              </p>
              <p>
                Piensa en ellas como tu <strong class="text-gray-800">base de datos de archivos</strong> con superpoderes:
                validación automática, tipos de TypeScript y consultas optimizadas.
              </p>
            </div>
          </div>
          
          <div class="bg-gradient-to-br from-indigo-300 to-sky-200 rounded-xl p-4 sm:p-6">
            <h4 class="text-white font-semibold mb-4">Estructura típica:</h4>
            <Console title="estructura-proyecto">
              <ConsoleLine color="text-gray-800">src/</ConsoleLine>
              <ConsoleLine color="text-gray-800">  └──content/</ConsoleLine>
              <ConsoleLine color="text-blue-600">      ├──blog/           ← Colección "blog"</ConsoleLine>
              <ConsoleLine color="text-green-600">      │   ├──post-1.md</ConsoleLine>
              <ConsoleLine color="text-green-600">      │   └──post-2.md</ConsoleLine>
              <ConsoleLine color="text-blue-600">      ├──projects/       ← Colección "projects"</ConsoleLine>
              <ConsoleLine color="text-green-600">      │    ├──project-a.md</ConsoleLine>
              <ConsoleLine color="text-green-600">      │    └──project-b.md</ConsoleLine>
              <ConsoleLine color="text-yellow-600">      └──config.ts       ← Configuración y schemas</ConsoleLine>
            </Console>
          </div>
        </div>

        <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
          <div class="text-center p-4 sm:p-6 bg-green-200 rounded-xl border border-green-800">
            <CheckCircle class="w-6 h-6 sm:w-8 sm:h-8 text-green-800 mx-auto mb-3" />
            <h4 class="text-esmerald-800 font-semibold mb-2 text-sm sm:text-base">Validación Automática</h4>
            <p class="text-green-700 text-xs sm:text-sm">Zod valida tus frontmatter automáticamente</p>
          </div>
          <div class="text-center p-4 sm:p-6 bg-blue-200 rounded-xl border border-blue-800">
            <CodeIcon class="w-6 h-6 sm:w-8 sm:h-8 text-blue-800 mx-auto mb-3" />
            <h4 class="text-blue-800 font-semibold mb-2 text-sm sm:text-base">TypeScript</h4>
            <p class="text-blue-700 text-xs sm:text-sm">Tipos automáticos sin configuración extra</p>
          </div>
          <div class="text-center p-4 sm:p-6 bg-purple-200 rounded-xl border border-purple-800 sm:col-span-2 lg:col-span-1">
            <Zap class="w-6 h-6 sm:w-8 sm:h-8 text-purple-800 mx-auto mb-3" />
            <h4 class="text-purple-800 font-semibold mb-2 text-sm sm:text-base">Rendimiento SSG</h4>
            <p class="text-purple-700 text-xs sm:text-sm">Todo se procesa en build time</p>
          </div>
        </div>
      </div>
    </div>

    <!-- When Section -->
    <div id="when-section" class="tab-content hidden p-6 sm:p-8">
      <div class="space-y-8">
        <h3 class="text-xl sm:text-2xl font-bold text-gray-800 mb-6">¿Cuándo usar Content Collections?</h3>
        
        <div class="grid md:grid-cols-2 gap-4 sm:gap-6">
          {whenToUse.map((use, index) => (
            <div
              class={`p-4 sm:p-6 rounded-xl border-2 ${
                use.recommended
                  ? 'bg-green-100 border-green-400'
                  : 'bg-red-100 border-red-400'
              }`}
            >
              <div class="flex items-start gap-3 mb-3">
                <use.icon class="w-5 h-5 flex-shrink-0 mt-0.5" />
                <div class="min-w-0">
                  <h4 class="text-gray-800 font-semibold text-sm sm:text-base">{use.scenario}</h4>
                  <span class={`inline-block text-xs px-2 py-1 rounded mt-1 font-medium ${
                    use.recommended ? 'bg-green-200 text-green-800 border border-green-300' : 'bg-red-200 text-red-800 border border-red-300'
                  }`}>
                    {use.recommended ? '✅ Recomendado' : '❌ Considera otras opciones'}
                  </span>
                </div>
              </div>
              <p class={`text-xs sm:text-sm ${use.recommended ? 'text-green-800' : 'text-red-800'}`}>
                {use.description}
              </p>
            </div>
          ))}
        </div>

        <div class="bg-gradient-to-r from-blue-100 to-sky-100 rounded-xl p-4 sm:p-6 border border-blue-300 shadow-lg">
          <h4 class="text-gray-800 font-semibold mb-4 flex items-center gap-2 flex-wrap text-sm sm:text-base">
            <Clock class="w-5 h-5" />
            <span>Nuevo en Astro 5.10: Live Content Collections</span>
          </h4>
          <p class="text-gray-800 mb-4 text-xs sm:text-sm">
            Astro 5.10 introduce una nueva función experimental: live content collections. Esta potente incorporación te permite obtener contenido en tiempo de ejecución en lugar de en tiempo de compilación, lo que abre nuevas posibilidades para el contenido dinámico y en tiempo real. 
          </p>
          <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
            <p class="text-blue-800 text-xs sm:text-sm mb-3">
              <strong>Perfecto para:</strong> Contenido que se actualiza con frecuencia desde CMS, API, bases de datos u otras fuentes mediante una API unificada, sin necesidad de reconstruir su sitio cuando los datos cambian.
            </p>
            <div class="space-y-2">
              <p class="text-blue-800 text-xs sm:text-sm font-bold">
                Se debe habilitar en el archivo <code class="text-yellow-600 bg-yellow-100 px-1 rounded border">astro.config.mjs</code>:
              </p>
              <Console title="astro.config.mjs">
                <Code id="dynamicCodeBlock" theme="github-light" code={`export default defineConfig({
    experimental: {
      liveContentCollections: true
    }
});`}
  lang="ts"
  style="background:transparent;"
/>
              </Console>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- How Section -->
    <div id="how-section" class="tab-content hidden p-6 sm:p-8">
      <div class="space-y-8">
        <h3 class="text-xl sm:text-2xl font-bold text-gray-800 mb-6">Implementación Paso a Paso</h3>
        
        <div class="space-y-8">
          <div>
            <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
              <span class="bg-indigo-600 text-white w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold">1</span>
              Define tu Schema (config.ts)
            </h4>
            <p class="text-gray-600 mb-4 text-sm">Cualquier documento que no coincida con el esquema no se agregará.</p>
            <Console title="src/content/config.ts">
              <Code
                code={codeExamples.schema}
                lang="typescript"
                class="text-xs sm:text-sm"
                theme="github-light"
                style="background:transparent;"
              />
            </Console>
          </div>

          <div>
            <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
              <span class="bg-indigo-600 text-white w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold">2</span>
              Usa tus Collections
            </h4>
            <Console title="blog.astro">
              <Code
                code={codeExamples.usage}
                lang="astro"
                class="text-xs sm:text-sm"
                theme="github-light"
                style="background:transparent;"
              />
            </Console>
          </div>

          <div>
            <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
              <span class="bg-indigo-600 text-white w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold">3</span>
              Astro 5.0+: Content Loaders
            </h4>
            <Console title="config.ts - Con Loaders">
              <Code
                code={codeExamples.loader}
                lang="typescript"
                class="text-xs sm:text-sm"
                theme="github-light"
                style="background:transparent;"
              />
            </Console>
            <p class="text-blue-800 text-xs sm:text-sm mt-3 bg-blue-200 p-3 rounded-lg border border-blue-500">
              💡 Los loaders te permiten cargar contenido desde cualquier fuente: APIs, bases de datos, 
              archivos en diferentes ubicaciones, etc.
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Alternatives Section -->
    <div id="alternatives-section" class="tab-content hidden p-6 sm:p-8">
      <div class="space-y-8">
        <h3 class="text-xl sm:text-2xl font-bold text-gray-800 mb-6">¿Content Collections o qué?</h3>
        
        <div class="space-y-6">
          {alternatives.map((alt, index) => (
            <div class="bg-gray-200 rounded-xl p-4 sm:p-6 border border-gray-300">
              <h4 class="text-lg sm:text-xl font-semibold text-gray-800 mb-2">{alt.name}</h4>
              <p class="text-gray-800 mb-4 text-sm sm:text-base">
                <strong>Cuándo usar:</strong> {alt.when}
              </p>
              
              <div class="grid md:grid-cols-2 gap-4">
                <div>
                  <h5 class="text-green-800 font-medium mb-2 text-sm sm:text-base">✅ Ventajas:</h5>
                  <ul class="text-green-600 text-xs sm:text-sm space-y-1">
                    {alt.pros.map((pro, i) => (
                      <li>• {pro}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 class="text-red-800 font-medium mb-2 text-sm sm:text-base">❌ Desventajas:</h5>
                  <ul class="text-red-600 text-xs sm:text-sm space-y-1">
                    {alt.cons.map((con, i) => (
                      <li>• {con}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div class="bg-orange-100 rounded-xl p-4 sm:p-6 border border-yellow-500">
          <h4 class="text-yellow-700 font-semibold mb-3 flex items-center gap-2 text-sm sm:text-base">
            <AlertCircle class="w-5 h-5" />
            Decisión Rápida
          </h4>
          <div class="text-yellow-700 space-y-2 text-xs sm:text-sm">
            <p>¿Tienes ≥5 documentos homogéneos? → <strong>Content Collections</strong></p>
            <p>¿Pocas páginas que son únicas (about, contact, home)? → <strong>Páginas estáticas <code class="bg-yellow-300 px-1 rounded">.astro</code></strong></p>
            <p>¿Datos cambian cada minuto? → <strong>Live Collections o SSR</strong></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function initTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    function showTab(targetTab) {
      tabContents.forEach(content => {
        content.classList.add('hidden');
      });

      tabButtons.forEach(button => {
        button.classList.remove('bg-indigo-600', 'text-white', 'shadow-lg', 'hover:text-gray-100', 'hover:bg-indigo-500');
        button.classList.add('bg-gray-100', 'text-gray-600');
      });

      const targetContent = document.getElementById(`${targetTab}-section`);
      if (targetContent) {
        targetContent.classList.remove('hidden');
      }

      const targetButton = document.querySelector(`[data-tab="${targetTab}"]`);
      if (targetButton) {
        targetButton.classList.remove('bg-gray-100', 'text-gray-600');
        targetButton.classList.add('bg-indigo-600', 'text-white', 'shadow-lg', 'hover:text-gray-100', 'hover:bg-indigo-500');
      }
    }

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        showTab(tabId);
      });
    });

    showTab('what');
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTabs);
  } else {
    initTabs();
  }
</script>

<style>
  .tab-content {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  pre {
    overflow-x: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  @media (max-width: 640px) {
    pre {
      font-size: 0.75rem;
      line-height: 1.4;
    }
  }
</style>